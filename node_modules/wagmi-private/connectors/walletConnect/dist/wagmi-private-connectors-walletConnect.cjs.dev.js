'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var base = require('../../../dist/base-1486c195.cjs.dev.js');
var providers = require('@ethersproject/providers');
var WalletConnectProvider = require('@walletconnect/ethereum-provider');
var utils = require('ethers/lib/utils');
require('eventemitter3');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var WalletConnectProvider__default = /*#__PURE__*/_interopDefault(WalletConnectProvider);

function _classPrivateMethodInitSpec(obj, privateSet) {
  base._checkPrivateRedeclaration(obj, privateSet);
  privateSet.add(obj);
}

function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return fn;
}

var switchChainAllowedRegex = /(rainbow)/i;

var _provider = /*#__PURE__*/new WeakMap();

var _switchChain = /*#__PURE__*/new WeakSet();

class WalletConnectConnector extends base.Connector {
  constructor(config) {
    super(config);

    _classPrivateMethodInitSpec(this, _switchChain);

    base._defineProperty(this, "id", 'walletConnect');

    base._defineProperty(this, "name", 'WalletConnect');

    base._defineProperty(this, "ready", true);

    base._classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });

    base._defineProperty(this, "onAccountsChanged", accounts => {
      if (accounts.length === 0) this.emit('disconnect');else this.emit('change', {
        account: utils.getAddress(accounts[0])
      });
    });

    base._defineProperty(this, "onChainChanged", chainId => {
      var id = base.normalizeChainId(chainId);
      var unsupported = this.isChainUnsupported(id);
      this.emit('change', {
        chain: {
          id,
          unsupported
        }
      });
    });

    base._defineProperty(this, "onDisconnect", () => {
      this.emit('disconnect');
    });
  }

  connect() {
    var _this = this;

    return base._asyncToGenerator(function* () {
      try {
        var _provider$connector$p, _provider$connector, _provider$connector$p2;

        var provider = _this.getProvider(true);

        provider.on('accountsChanged', _this.onAccountsChanged);
        provider.on('chainChanged', _this.onChainChanged);
        provider.on('disconnect', _this.onDisconnect);
        var accounts = yield provider.enable();
        var account = utils.getAddress(accounts[0]);
        var id = yield _this.getChainId();

        var unsupported = _this.isChainUnsupported(id); // Not all WalletConnect options support programmatic chain switching
        // Only enable for wallet options that do


        var walletName = (_provider$connector$p = (_provider$connector = provider.connector) === null || _provider$connector === void 0 ? void 0 : (_provider$connector$p2 = _provider$connector.peerMeta) === null || _provider$connector$p2 === void 0 ? void 0 : _provider$connector$p2.name) !== null && _provider$connector$p !== void 0 ? _provider$connector$p : '';
        if (switchChainAllowedRegex.test(walletName)) _this.switchChain = _classPrivateMethodGet(_this, _switchChain, _switchChain2);
        return {
          account,
          chain: {
            id,
            unsupported
          },
          provider: new providers.Web3Provider(provider)
        };
      } catch (error) {
        if (/user closed modal/i.test(error.message)) throw new base.UserRejectedRequestError();
        throw error;
      }
    })();
  }

  disconnect() {
    var _this2 = this;

    return base._asyncToGenerator(function* () {
      var provider = _this2.getProvider();

      yield provider.disconnect();
      provider.removeListener('accountsChanged', _this2.onAccountsChanged);
      provider.removeListener('chainChanged', _this2.onChainChanged);
      provider.removeListener('disconnect', _this2.onDisconnect);
      typeof localStorage !== 'undefined' && localStorage.removeItem('walletconnect');
    })();
  }

  getAccount() {
    var _this3 = this;

    return base._asyncToGenerator(function* () {
      var provider = _this3.getProvider();

      var accounts = provider.accounts; // return checksum address

      return utils.getAddress(accounts[0]);
    })();
  }

  getChainId() {
    var _this4 = this;

    return base._asyncToGenerator(function* () {
      var provider = _this4.getProvider();

      var chainId = base.normalizeChainId(provider.chainId);
      return chainId;
    })();
  }

  getProvider(create) {
    if (!base._classPrivateFieldGet(this, _provider) || create) base._classPrivateFieldSet(this, _provider, new WalletConnectProvider__default["default"](this.options));
    return base._classPrivateFieldGet(this, _provider);
  }

  getSigner() {
    var _this5 = this;

    return base._asyncToGenerator(function* () {
      var provider = _this5.getProvider();

      var account = yield _this5.getAccount();
      return new providers.Web3Provider(provider).getSigner(account);
    })();
  }

  isAuthorized() {
    var _this6 = this;

    return base._asyncToGenerator(function* () {
      try {
        var account = yield _this6.getAccount();
        return !!account;
      } catch (_unused) {
        return false;
      }
    })();
  }

}

function _switchChain2(_x) {
  return _switchChain3.apply(this, arguments);
}

function _switchChain3() {
  _switchChain3 = base._asyncToGenerator(function* (chainId) {
    var provider = this.getProvider();
    var id = utils.hexValue(chainId);

    try {
      yield provider.request({
        method: 'wallet_switchEthereumChain',
        params: [{
          chainId: id
        }]
      });
      var chains = [...this.chains, ...base.allChains];
      return chains.find(x => x.id === chainId);
    } catch (error) {
      var message = typeof error === 'string' ? error : error === null || error === void 0 ? void 0 : error.message;
      if (/user rejected request/i.test(message)) throw new base.UserRejectedRequestError();else throw new base.SwitchChainError();
    }
  });
  return _switchChain3.apply(this, arguments);
}

exports.WalletConnectConnector = WalletConnectConnector;
