import { C as Connector, _ as _defineProperty, a as _classPrivateFieldInitSpec, n as normalizeChainId, b as _asyncToGenerator, U as UserRejectedRequestError, e as _classPrivateFieldGet, d as _classPrivateFieldSet, f as allChains, S as SwitchChainError } from '../../../dist/base-3b1382b0.esm.js';
import { Web3Provider } from '@ethersproject/providers';
import { WalletLink } from 'walletlink';
import { getAddress, hexValue } from 'ethers/lib/utils';
import 'eventemitter3';

var _client = /*#__PURE__*/new WeakMap();

var _provider = /*#__PURE__*/new WeakMap();

class WalletLinkConnector extends Connector {
  constructor(config) {
    var _window$ethereum;

    super(config);

    _defineProperty(this, "id", 'walletLink');

    _defineProperty(this, "name", 'Coinbase Wallet');

    _defineProperty(this, "ready", typeof window !== 'undefined' && !((_window$ethereum = window.ethereum) !== null && _window$ethereum !== void 0 && _window$ethereum.isCoinbaseWallet));

    _classPrivateFieldInitSpec(this, _client, {
      writable: true,
      value: void 0
    });

    _classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });

    _defineProperty(this, "onAccountsChanged", accounts => {
      if (accounts.length === 0) this.emit('disconnect');else this.emit('change', {
        account: getAddress(accounts[0])
      });
    });

    _defineProperty(this, "onChainChanged", chainId => {
      var id = normalizeChainId(chainId);
      var unsupported = this.isChainUnsupported(id);
      this.emit('change', {
        chain: {
          id,
          unsupported
        }
      });
    });

    _defineProperty(this, "onDisconnect", () => {
      this.emit('disconnect');
    });
  }

  connect() {
    var _this = this;

    return _asyncToGenerator(function* () {
      try {
        var provider = _this.getProvider();

        provider.on('accountsChanged', _this.onAccountsChanged);
        provider.on('chainChanged', _this.onChainChanged);
        provider.on('disconnect', _this.onDisconnect);
        var accounts = yield provider.enable();
        var account = getAddress(accounts[0]);
        var id = yield _this.getChainId();

        var unsupported = _this.isChainUnsupported(id);

        return {
          account,
          chain: {
            id,
            unsupported
          },
          provider: new Web3Provider(provider)
        };
      } catch (error) {
        if (/user closed modal/i.test(error.message)) throw new UserRejectedRequestError();
        throw error;
      }
    })();
  }

  disconnect() {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      if (!_classPrivateFieldGet(_this2, _provider)) return;

      var provider = _this2.getProvider();

      provider.removeListener('accountsChanged', _this2.onAccountsChanged);
      provider.removeListener('chainChanged', _this2.onChainChanged);
      provider.removeListener('disconnect', _this2.onDisconnect);
      provider.disconnect();
      provider.close();

      if (typeof localStorage !== 'undefined') {
        var n = localStorage.length;

        while (n--) {
          var key = localStorage.key(n);
          if (!key) continue;
          if (!/-walletlink/.test(key)) continue;
          localStorage.removeItem(key);
        }
      }
    })();
  }

  getAccount() {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      var provider = _this3.getProvider();

      var accounts = yield provider.request({
        method: 'eth_accounts'
      }); // return checksum address

      return getAddress(accounts[0]);
    })();
  }

  getChainId() {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      var provider = _this4.getProvider();

      var chainId = normalizeChainId(provider.chainId);
      return chainId;
    })();
  }

  getProvider() {
    if (!_classPrivateFieldGet(this, _provider)) {
      _classPrivateFieldSet(this, _client, new WalletLink(this.options));

      _classPrivateFieldSet(this, _provider, _classPrivateFieldGet(this, _client).makeWeb3Provider(this.options.jsonRpcUrl));
    }

    return _classPrivateFieldGet(this, _provider);
  }

  getSigner() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      var provider = _this5.getProvider();

      var account = yield _this5.getAccount();
      return new Web3Provider(provider).getSigner(account);
    })();
  }

  isAuthorized() {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      try {
        var account = yield _this6.getAccount();
        return !!account;
      } catch (_unused) {
        return false;
      }
    })();
  }

  switchChain(chainId) {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      var provider = _this7.getProvider();

      var id = hexValue(chainId);

      try {
        yield provider.request({
          method: 'wallet_switchEthereumChain',
          params: [{
            chainId: id
          }]
        });
        var chains = [..._this7.chains, ...allChains];
        return chains.find(x => x.id === chainId);
      } catch (error) {
        if (/user rejected signature request/i.test(error.message)) throw new UserRejectedRequestError();else throw new SwitchChainError();
      }
    })();
  }

}

export { WalletLinkConnector };
