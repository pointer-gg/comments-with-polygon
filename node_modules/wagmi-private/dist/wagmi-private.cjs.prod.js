'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var base = require('./base-e2d9120e.cjs.prod.js');
var providers = require('@ethersproject/providers');
var utils = require('ethers/lib/utils');
require('eventemitter3');

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      base._defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

var erc1155ABI = [{
  constant: true,
  inputs: [{
    internalType: 'address',
    name: '_owner',
    type: 'address'
  }, {
    internalType: 'uint256',
    name: '_id',
    type: 'uint256'
  }],
  name: 'balanceOf',
  outputs: [{
    internalType: 'uint256',
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    internalType: 'uint256',
    name: '_id',
    type: 'uint256'
  }],
  name: 'uri',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}];

var erc20ABI = [{
  constant: true,
  inputs: [],
  name: 'name',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_spender',
    type: 'address'
  }, {
    name: '_value',
    type: 'uint256'
  }],
  name: 'approve',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'totalSupply',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_from',
    type: 'address'
  }, {
    name: '_to',
    type: 'address'
  }, {
    name: '_value',
    type: 'uint256'
  }],
  name: 'transferFrom',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'decimals',
  outputs: [{
    name: '',
    type: 'uint8'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '_owner',
    type: 'address'
  }],
  name: 'balanceOf',
  outputs: [{
    name: 'balance',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: true,
  inputs: [],
  name: 'symbol',
  outputs: [{
    name: '',
    type: 'string'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  constant: false,
  inputs: [{
    name: '_to',
    type: 'address'
  }, {
    name: '_value',
    type: 'uint256'
  }],
  name: 'transfer',
  outputs: [{
    name: '',
    type: 'bool'
  }],
  payable: false,
  stateMutability: 'nonpayable',
  type: 'function'
}, {
  constant: true,
  inputs: [{
    name: '_owner',
    type: 'address'
  }, {
    name: '_spender',
    type: 'address'
  }],
  name: 'allowance',
  outputs: [{
    name: '',
    type: 'uint256'
  }],
  payable: false,
  stateMutability: 'view',
  type: 'function'
}, {
  payable: true,
  stateMutability: 'payable',
  type: 'fallback'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'owner',
    type: 'address'
  }, {
    indexed: true,
    name: 'spender',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Approval',
  type: 'event'
}, {
  anonymous: false,
  inputs: [{
    indexed: true,
    name: 'from',
    type: 'address'
  }, {
    indexed: true,
    name: 'to',
    type: 'address'
  }, {
    indexed: false,
    name: 'value',
    type: 'uint256'
  }],
  name: 'Transfer',
  type: 'event'
}];

var erc721ABI = [{
  inputs: [{
    internalType: 'uint256',
    name: 'tokenId',
    type: 'uint256'
  }],
  name: 'ownerOf',
  outputs: [{
    internalType: 'address',
    name: '',
    type: 'address'
  }],
  stateMutability: 'view',
  type: 'function'
}, {
  inputs: [{
    internalType: 'uint256',
    name: 'tokenId',
    type: 'uint256'
  }],
  name: 'tokenURI',
  outputs: [{
    internalType: 'string',
    name: '',
    type: 'string'
  }],
  stateMutability: 'view',
  type: 'function'
}];

// https://github.com/ethers-io/ethers.js/blob/master/packages/units/src.ts/index.ts#L10-L18
var units = ['wei', 'kwei', 'mwei', 'gwei', 'szabo', 'finney', 'ether'];

var getInjectedName = ethereum => {
  if (!ethereum) return 'Injected';
  if (ethereum.isMetaMask) return 'MetaMask';
  if (ethereum.isCoinbaseWallet) return 'Coinbase Wallet';
  if (ethereum.isFrame) return 'Frame';
  if (ethereum.isTally) return 'Tally';
  return 'Injected';
};

var shimKey = 'wagmi.shimDisconnect';

var _provider = /*#__PURE__*/new WeakMap();

class InjectedConnector extends base.Connector {
  constructor(config) {
    super(_objectSpread2(_objectSpread2({}, config), {}, {
      options: config === null || config === void 0 ? void 0 : config.options
    }));

    base._defineProperty(this, "id", 'injected');

    base._defineProperty(this, "name", void 0);

    base._defineProperty(this, "ready", typeof window != 'undefined' && !!window.ethereum);

    base._classPrivateFieldInitSpec(this, _provider, {
      writable: true,
      value: void 0
    });

    base._defineProperty(this, "onAccountsChanged", accounts => {
      if (accounts.length === 0) this.emit('disconnect');else this.emit('change', {
        account: utils.getAddress(accounts[0])
      });
    });

    base._defineProperty(this, "onChainChanged", chainId => {
      var id = base.normalizeChainId(chainId);
      var unsupported = this.isChainUnsupported(id);
      this.emit('change', {
        chain: {
          id,
          unsupported
        }
      });
    });

    base._defineProperty(this, "onDisconnect", () => {
      var _this$options;

      this.emit('disconnect');
      if ((_this$options = this.options) !== null && _this$options !== void 0 && _this$options.shimDisconnect) typeof localStorage !== 'undefined' && localStorage.removeItem(shimKey);
    });

    var name = 'Injected';
    if (typeof window !== 'undefined') name = getInjectedName(window.ethereum);
    this.name = name;
  }

  connect() {
    var _this = this;

    return base._asyncToGenerator(function* () {
      try {
        var _this$options2;

        var provider = _this.getProvider();

        if (!provider) throw new base.ConnectorNotFoundError();

        if (provider.on) {
          provider.on('accountsChanged', _this.onAccountsChanged);
          provider.on('chainChanged', _this.onChainChanged);
          provider.on('disconnect', _this.onDisconnect);
        }

        var account = yield _this.getAccount();
        var id = yield _this.getChainId();

        var unsupported = _this.isChainUnsupported(id);

        if ((_this$options2 = _this.options) !== null && _this$options2 !== void 0 && _this$options2.shimDisconnect) typeof localStorage !== 'undefined' && localStorage.setItem(shimKey, 'true');
        return {
          account,
          chain: {
            id,
            unsupported
          },
          provider
        };
      } catch (error) {
        if (error.code === 4001) throw new base.UserRejectedRequestError();
        throw error;
      }
    })();
  }

  disconnect() {
    var _this2 = this;

    return base._asyncToGenerator(function* () {
      var _this2$options;

      var provider = _this2.getProvider();

      if (!(provider !== null && provider !== void 0 && provider.removeListener)) return;
      provider.removeListener('accountsChanged', _this2.onAccountsChanged);
      provider.removeListener('chainChanged', _this2.onChainChanged);
      provider.removeListener('disconnect', _this2.onDisconnect);
      if ((_this2$options = _this2.options) !== null && _this2$options !== void 0 && _this2$options.shimDisconnect) typeof localStorage !== 'undefined' && localStorage.removeItem(shimKey);
    })();
  }

  getAccount() {
    var _this3 = this;

    return base._asyncToGenerator(function* () {
      var provider = _this3.getProvider();

      if (!provider) throw new base.ConnectorNotFoundError();
      var accounts = yield provider.request({
        method: 'eth_requestAccounts'
      }); // return checksum address

      return utils.getAddress(accounts[0]);
    })();
  }

  getChainId() {
    var _this4 = this;

    return base._asyncToGenerator(function* () {
      var provider = _this4.getProvider();

      if (!provider) throw new base.ConnectorNotFoundError();
      return yield provider.request({
        method: 'eth_chainId'
      }).then(base.normalizeChainId);
    })();
  }

  getProvider() {
    if (typeof window !== 'undefined' && !!window.ethereum) base._classPrivateFieldSet(this, _provider, window.ethereum);
    return base._classPrivateFieldGet(this, _provider);
  }

  getSigner() {
    var _this5 = this;

    return base._asyncToGenerator(function* () {
      var provider = _this5.getProvider();

      var account = yield _this5.getAccount();
      return new providers.Web3Provider(provider).getSigner(account);
    })();
  }

  isAuthorized() {
    var _this6 = this;

    return base._asyncToGenerator(function* () {
      try {
        var _this6$options;

        if ((_this6$options = _this6.options) !== null && _this6$options !== void 0 && _this6$options.shimDisconnect && typeof localStorage !== 'undefined' && !localStorage.getItem(shimKey)) return false;

        var provider = _this6.getProvider();

        if (!provider) throw new base.ConnectorNotFoundError();
        var accounts = yield provider.request({
          method: 'eth_accounts'
        });
        var account = accounts[0];
        return !!account;
      } catch (_unused) {
        return false;
      }
    })();
  }

  switchChain(chainId) {
    var _this7 = this;

    return base._asyncToGenerator(function* () {
      var provider = _this7.getProvider();

      if (!provider) throw new base.ConnectorNotFoundError();
      var id = utils.hexValue(chainId);

      try {
        yield provider.request({
          method: 'wallet_switchEthereumChain',
          params: [{
            chainId: id
          }]
        });
        var chains = [..._this7.chains, ...base.allChains];
        return chains.find(x => x.id === chainId);
      } catch (error) {
        // Indicates chain is not added to MetaMask
        if (error.code === 4902) {
          try {
            var _chain$blockExplorers;

            var chain = _this7.chains.find(x => x.id === chainId);

            if (!chain) throw new base.ChainNotConfiguredError();
            yield provider.request({
              method: 'wallet_addEthereumChain',
              params: [{
                chainId: id,
                chainName: chain.name,
                nativeCurrency: chain.nativeCurrency,
                rpcUrls: chain.rpcUrls,
                blockExplorerUrls: (_chain$blockExplorers = chain.blockExplorers) === null || _chain$blockExplorers === void 0 ? void 0 : _chain$blockExplorers.map(x => x.url)
              }]
            });
          } catch (addError) {
            throw new base.AddChainError();
          }
        } else if (error.code === 4001) throw new base.UserRejectedRequestError();else throw new base.SwitchChainError();
      }
    })();
  }

  watchAsset(_ref) {
    var _this8 = this;

    return base._asyncToGenerator(function* () {
      var {
        address,
        decimals = 18,
        image,
        symbol
      } = _ref;

      var provider = _this8.getProvider();

      if (!provider) throw new base.ConnectorNotFoundError();
      yield provider.request({
        method: 'wallet_watchAsset',
        params: {
          type: 'ERC20',
          options: {
            address,
            decimals,
            image,
            symbol
          }
        }
      });
    })();
  }

}

exports.AddChainError = base.AddChainError;
exports.ChainNotConfiguredError = base.ChainNotConfiguredError;
exports.Connector = base.Connector;
exports.ConnectorAlreadyConnectedError = base.ConnectorAlreadyConnectedError;
exports.ConnectorNotFoundError = base.ConnectorNotFoundError;
exports.SwitchChainError = base.SwitchChainError;
exports.UserRejectedRequestError = base.UserRejectedRequestError;
exports.allChains = base.allChains;
exports.chain = base.chain;
exports.defaultChains = base.defaultChains;
exports.defaultL2Chains = base.defaultL2Chains;
exports.developmentChains = base.developmentChains;
exports.normalizeChainId = base.normalizeChainId;
exports.InjectedConnector = InjectedConnector;
exports.erc1155ABI = erc1155ABI;
exports.erc20ABI = erc20ABI;
exports.erc721ABI = erc721ABI;
exports.units = units;
