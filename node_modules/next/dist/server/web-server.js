"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = void 0;
var _baseServer = _interopRequireDefault(require("./base-server"));
var _render = require("./render");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class NextWebServer extends _baseServer.default {
    generateRewrites() {
        // @TODO: assuming minimal mode right now
        return {
            beforeFiles: [],
            afterFiles: [],
            fallback: []
        };
    }
    handleCompression() {
    // @TODO
    }
    getRoutesManifest() {
        return {
            headers: [],
            rewrites: {
                fallback: [],
                afterFiles: [],
                beforeFiles: []
            },
            redirects: []
        };
    }
    getPagePath() {
        // @TODO
        return '';
    }
    getPublicDir() {
        // @TODO
        return '';
    }
    getBuildId() {
        return globalThis.__server_context.buildId;
    }
    loadEnvConfig() {
    // @TODO
    }
    getHasStaticDir() {
        return false;
    }
    async hasMiddleware() {
        return false;
    }
    generateImageRoutes() {
        return [];
    }
    generateStaticRoutes() {
        return [];
    }
    generateFsStaticRoutes() {
        return [];
    }
    generatePublicRoutes() {
        return [];
    }
    getMiddleware() {
        return [];
    }
    generateCatchAllMiddlewareRoute() {
        return undefined;
    }
    getFontManifest() {
        return undefined;
    }
    getMiddlewareManifest() {
        return undefined;
    }
    getPagesManifest() {
        return {
            [globalThis.__current_route]: ''
        };
    }
    getFilesystemPaths() {
        return new Set();
    }
    getPrerenderManifest() {
        return {
            version: 3,
            routes: {
            },
            dynamicRoutes: {
            },
            notFoundRoutes: [],
            preview: {
                previewModeId: '',
                previewModeSigningKey: '',
                previewModeEncryptionKey: ''
            }
        };
    }
    async renderHTML(req, _res, pathname, query, renderOpts) {
        return (0, _render).renderToHTML({
            url: pathname,
            cookies: req.cookies,
            headers: req.headers
        }, {
        }, pathname, query, {
            ...renderOpts,
            supportsDynamicHTML: true,
            concurrentFeatures: true,
            disableOptimizedLoading: true
        });
    }
    async sendRenderResult(_req, res, options) {
        // @TODO
        const writer = res.transformStream.writable.getWriter();
        const encoder = new TextEncoder();
        options.result.pipe({
            write: (str)=>writer.write(encoder.encode(str))
            ,
            end: ()=>writer.close()
        });
        // To prevent Safari's bfcache caching the "shell", we have to add the
        // `no-cache` header to document responses.
        res.setHeader('Cache-Control', 'no-cache, no-store, max-age=0, must-revalidate');
        res.send();
    }
    async runApi() {
        // @TODO
        return true;
    }
    async findPageComponents(pathname, query, params) {
        if (pathname === globalThis.__current_route) {
            return {
                query: {
                    ...query || {
                    },
                    ...params || {
                    }
                },
                components: globalThis.__server_context
            };
        }
        const { errorMod , error500Mod  } = globalThis.__server_context;
        // If there is a custom 500 page.
        if (pathname === '/500' && error500Mod) {
            return {
                query: {
                    ...query || {
                    },
                    ...params || {
                    }
                },
                components: {
                    ...globalThis.__server_context,
                    Component: error500Mod.default,
                    getStaticProps: error500Mod.getStaticProps,
                    getServerSideProps: error500Mod.getServerSideProps,
                    getStaticPaths: error500Mod.getStaticPaths
                }
            };
        }
        if (pathname === '/_error') {
            return {
                query: {
                    ...query || {
                    },
                    ...params || {
                    }
                },
                components: {
                    ...globalThis.__server_context,
                    Component: errorMod.default,
                    getStaticProps: errorMod.getStaticProps,
                    getServerSideProps: errorMod.getServerSideProps,
                    getStaticPaths: errorMod.getStaticPaths
                }
            };
        }
        return null;
    }
}
exports.default = NextWebServer;

//# sourceMappingURL=web-server.js.map